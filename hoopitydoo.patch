diff --git a/src/editor/Main.java b/src/editor/Main.java
index ec1d4e6..64822d5 100644
--- a/src/editor/Main.java
+++ b/src/editor/Main.java
@@ -21,6 +21,8 @@ import engine.Engine;
 import engine.entity.*;
 import engine.render.Shader;
 import engine.render.ubos.Light;
+import engine.render.ubos.Lights;
+import engine.render.ubos.Material;
 
 public class Main implements ActionListener {
 	// A filthy hack to get around the combobox sending to events on select
@@ -42,6 +44,10 @@ public class Main implements ActionListener {
 	private Entity edit_model;
 	private Camera camera;
 	
+	private Lights lights;
+	private Light light;
+	private Light light2;
+	
 	private boolean multiThreaded = false;
 
 	public static void main(String args[]) {
@@ -131,22 +137,41 @@ public class Main implements ActionListener {
 	
 	//This function is just for testing; we'll need to set this stuff at the map level
 	public void addUBOsToDefaultShader() {
-		Shader shader = (Shader)engine.resource_manager.getResource("default", "shaders");
+		lights = new Lights();
 		
-        Light light = new Light(
-			new Vector4f(0.0f,5.0f,0.0f,1.0f),
-			new Vector4f(128.0f,128.0f,128.0f,255.0f),
-			new Vector4f(64.0f,64.0f,64.0f,255.0f),
-			new Vector4f(64.0f,64.0f,64.0f,255.0f),
+		Shader shader = (Shader)engine.resource_manager.getResource("default", "shaders");
+		light = new Light(
+			new Vector4f(0.0f,2.0f,10.0f,1.0f),
+			new Vector4f(5.0f,0.0f,0.0f,255.0f),
+			new Vector4f(5.0f,0.0f,0.0f,255.0f),
+			new Vector4f(5.0f,0.0f,0.0f,255.0f),
+			0.1f,
 			1.0f,
+			0.1f,
+			new Vector3f(0.0f,-1.0f,0.0f),
 			1.0f,
+			1.0f
+		);
+        light2 = new Light(
+			new Vector4f(0.0f,2.0f,-10.0f,1.0f),
+			new Vector4f(0.0f,0.0f,5.0f,255.0f),
+			new Vector4f(0.0f,0.0f,5.0f,255.0f),
+			new Vector4f(0.0f,0.0f,5.0f,255.0f),
+			0.1f,
 			1.0f,
+			0.1f,
 			new Vector3f(0.0f,-1.0f,0.0f),
-			100.0f,
+			1.0f,
 			1.0f
 		);
-        shader.addUBO(light);
+        lights.add(light);
+        lights.add(light2);
+        
+        shader.addUBO(lights);
+        
     	shader.addUBO(camera.getMVPmatrix());
+    	
+    	shader.addUBO(new Material());
 	}
 	
 	@Override
diff --git a/src/editor/window/LightMenu.java b/src/editor/window/LightMenu.java
index ff59496..2943cc4 100644
--- a/src/editor/window/LightMenu.java
+++ b/src/editor/window/LightMenu.java
@@ -36,6 +36,7 @@ public class LightMenu extends Window implements ActionListener {
     
 	public LightMenu() {
 		super();
+		light = new Light();
 		action_listeners = new ArrayList<ActionListener>();
 		setTitle("Material Menu");
 
@@ -110,21 +111,35 @@ public class LightMenu extends Window implements ActionListener {
 		
 		//this.add(layout);
 		this.add(dialoglayout);
+		
+		addCallbacks();
+	}
+	
+	private void addCallbacks() {
+		position.addActionListener(this);
+		ambient.addActionListener(this);
+		diffuse.addActionListener(this);
+		specular.addActionListener(this);
+	    constant_attenuation.addActionListener(this);
+	    linear_attenuation.addActionListener(this);
+	    quadratic_attenuation.addActionListener(this);
+	    spot_direction.addActionListener(this);
+	    spot_cutoff.addActionListener(this);
+	    spot_exponent.addActionListener(this);
 	}
 
 	public void addActionListener(ActionListener listener) {
 		action_listeners.add(listener);
 	}
-
 	private void fireActionEvent(String event) {
 		for (ActionListener ae : action_listeners) {
 			ae.actionPerformed(new ActionEvent(this, event));
 		}
 	}
-
 	@Override
 	public void actionPerformed(ActionEvent e) {
-		fireActionEvent("material");
+		fireActionEvent("light");
+		updateLight();
 	}
 	
 	public Light getLight() {
@@ -145,6 +160,19 @@ public class LightMenu extends Window implements ActionListener {
 		);
 	}
 	public void setLight(Light light) {
-		this.light = light;
+		position.setValue(light.getPosition());
+		ambient.setValue(light.getAmbient());
+		diffuse.setValue(light.getDiffuse());
+		specular.setValue(light.getSpecular());
+	    constant_attenuation.setValue(light.getConstantAttenuation());
+	    linear_attenuation.setValue(light.getLinearAttenuation());
+	    quadratic_attenuation.setValue(light.getQuadraticAttenuation());
+	    spot_direction.setValue(light.getSpotDirection());
+	    spot_cutoff.setValue(light.getSpotCutoff());
+	    spot_exponent.setValue(light.getSpotExponent());
+	    
+	    this.light = light;
 	}
+	
+	
 }
diff --git a/src/editor/window/MaterialMenu.java b/src/editor/window/MaterialMenu.java
index d087ca7..f11019b 100644
--- a/src/editor/window/MaterialMenu.java
+++ b/src/editor/window/MaterialMenu.java
@@ -24,6 +24,7 @@ public class MaterialMenu extends Window implements ActionListener {
 	
 	public MaterialMenu() {
 		super();
+		material = new Material();
 		action_listeners = new ArrayList<ActionListener>();
 		setTitle("Material Menu");
 
@@ -66,21 +67,30 @@ public class MaterialMenu extends Window implements ActionListener {
 		
 		//this.add(layout);
 		this.add(dialoglayout);
+		
+		addCallbacks();
+	}
+	
+	private void addCallbacks() {
+		ambient.addActionListener(this);
+		diffuse.addActionListener(this);
+		specular.addActionListener(this);
+		shininess.addActionListener(this);
+		alpha.addActionListener(this);
 	}
 
 	public void addActionListener(ActionListener listener) {
 		action_listeners.add(listener);
 	}
-
 	private void fireActionEvent(String event) {
 		for (ActionListener ae : action_listeners) {
 			ae.actionPerformed(new ActionEvent(this, event));
 		}
 	}
-
 	@Override
 	public void actionPerformed(ActionEvent e) {
 		fireActionEvent("material");
+		updateMaterial();
 	}
 	
 	public Material getMaterial() {
@@ -96,6 +106,12 @@ public class MaterialMenu extends Window implements ActionListener {
 		);
 	}
 	public void setMaterial(Material material) {
+		ambient.setValue(material.getAmbient());
+		diffuse.setValue(material.getDiffuse());
+		specular.setValue(material.getSpecular());
+		shininess.setValue(material.getShininess());
+		alpha.setValue(material.getAlpha());
+		
 		this.material = material;
 	}
 }
diff --git a/src/engine/Engine.java b/src/engine/Engine.java
index 40ecbff..35378ad 100644
--- a/src/engine/Engine.java
+++ b/src/engine/Engine.java
@@ -73,20 +73,21 @@ public class Engine {
 			renderer = new FixedRenderer(entity_list);
 		renderer.initGL();
 		
-		
-		setWindowTheme("default");
 		setKeyMap("default");
 		
 		ai_manager = new AIManager();
 	}
 
-	private void setWindowTheme(String wm) {
-		renderer.setWindowManager((WindowManager)resource_manager.getResource(wm, "themes"));
-	}
-
 	public void run() {
 		startPhysics();
 		startRendering();
+
+		try {
+			render_thread.join();
+			physics_thread.join();
+		} catch (InterruptedException e) {
+			e.printStackTrace();
+		}
 	}
 
 	/* Entity API */
@@ -159,6 +160,7 @@ public class Engine {
 				while (!finished.get()) {
 					physicsOnce();
 				}
+				
 			}
 		};
 		physics_thread.start();
diff --git a/src/engine/input/InputMap.java b/src/engine/input/InputMap.java
index 5fc4da4..5ed41af 100644
--- a/src/engine/input/InputMap.java
+++ b/src/engine/input/InputMap.java
@@ -1,7 +1,7 @@
 package engine.input;
 
+import java.io.*;
 import java.lang.reflect.Field;
-import java.net.URL;
 import java.util.ArrayList;
 import java.util.HashMap;
 
@@ -323,14 +323,14 @@ public class InputMap implements Resource {
 	}
 
 	@Override
-	public void loadFromFile(ResourceManager resource_manager, URL url, String extension) throws Exception {
+	public void loadFromFile(ResourceManager resource_manager, InputStream is, String extension) throws Exception {
 		Document dom;
   		DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
     
   		//Create Dom Structure
   		DocumentBuilder db;
 		db = dbf.newDocumentBuilder();
-		dom = db.parse(url.openStream());
+		dom = db.parse(is);
 	
 		Element root_element = dom.getDocumentElement();
 		if(root_element.getNodeName().equalsIgnoreCase("keymap")){
diff --git a/src/engine/render/FixedRenderer.java b/src/engine/render/FixedRenderer.java
index a917ca8..9e4c8fe 100644
--- a/src/engine/render/FixedRenderer.java
+++ b/src/engine/render/FixedRenderer.java
@@ -105,6 +105,7 @@ public class FixedRenderer implements RendererInterface {
 		} catch (LWJGLException e) {
 			e.printStackTrace();
 		}
+		window_manager = new WindowManager();
 
 		// camera = (Camera) objectList.getItem(Camera.CAMERA_NAME);
 
@@ -229,9 +230,4 @@ public class FixedRenderer implements RendererInterface {
 	public void setCamera(Camera camera) {
 		this.camera = camera;
 	}
-
-	@Override
-	public void setWindowManager(WindowManager wm) {
-		this.window_manager = wm;
-	}
 }
\ No newline at end of file
diff --git a/src/engine/render/Model.java b/src/engine/render/Model.java
index d1feb46..6826ad3 100644
--- a/src/engine/render/Model.java
+++ b/src/engine/render/Model.java
@@ -4,7 +4,7 @@ package engine.render;
 import java.io.BufferedWriter;
 import java.io.FileWriter;
 import java.io.IOException;
-import java.net.URL;
+import java.io.InputStream;
 import java.nio.FloatBuffer;
 import java.nio.IntBuffer;
 
@@ -625,8 +625,8 @@ public class Model implements RenderObject, Resource {
 	}
 
 	@Override
-	public void loadFromFile(ResourceManager resource_manager, URL url, String extension) throws Exception {
-		this.combineModels(FileLoader.loadFile(url.openStream(), extension));
+	public void loadFromFile(ResourceManager resource_manager, InputStream is, String extension) throws Exception {
+		this.combineModels(FileLoader.loadFile(is, extension));
 		Shader shader = (Shader)resource_manager.getResource("default", "shaders");
 		this.setShader(shader);
 	}
diff --git a/src/engine/render/ProgrammableRenderer.java b/src/engine/render/ProgrammableRenderer.java
index 4c53765..0276c40 100644
--- a/src/engine/render/ProgrammableRenderer.java
+++ b/src/engine/render/ProgrammableRenderer.java
@@ -84,6 +84,7 @@ public class ProgrammableRenderer implements RendererInterface {
 		} catch (LWJGLException e) {
 			e.printStackTrace();
 		}
+		window_manager = new WindowManager();
 
 		// camera = (Camera) objectList.getItem(Camera.CAMERA_NAME);
 
@@ -142,9 +143,4 @@ public class ProgrammableRenderer implements RendererInterface {
 	public void setCamera(Camera camera) {
 		this.camera = camera;
 	}
-
-	@Override
-	public void setWindowManager(WindowManager wm) {
-		this.window_manager = wm;
-	}
 }
\ No newline at end of file
diff --git a/src/engine/render/RendererInterface.java b/src/engine/render/RendererInterface.java
index e97b264..574f619 100644
--- a/src/engine/render/RendererInterface.java
+++ b/src/engine/render/RendererInterface.java
@@ -5,7 +5,6 @@ import engine.window.WindowManager;
 
 public interface RendererInterface {
 	public void draw();
-	public void setWindowManager(WindowManager wm);
 	public WindowManager getWindowManager();
 	public void initGL();
 	public void setCamera(Camera camera);
diff --git a/src/engine/render/Shader.java b/src/engine/render/Shader.java
index 08ce081..5be300f 100644
--- a/src/engine/render/Shader.java
+++ b/src/engine/render/Shader.java
@@ -6,7 +6,6 @@ import engine.resource.ResourceManager;
 import java.io.BufferedReader;
 import java.io.InputStream;
 import java.io.InputStreamReader;
-import java.net.URL;
 import java.nio.ByteBuffer;
 import java.nio.FloatBuffer;
 import java.nio.IntBuffer;
@@ -16,6 +15,7 @@ import javax.vecmath.Vector3f;
 
 import org.lwjgl.BufferUtils;
 import org.lwjgl.opengl.ARBFragmentShader;
+import org.lwjgl.opengl.ARBGeometryShader4;
 import org.lwjgl.opengl.ARBShaderObjects;
 import org.lwjgl.opengl.ARBVertexShader;
 
@@ -39,6 +39,7 @@ public class Shader implements Resource{
     private int shader=0;
     private int vertShader=0;
     private int fragShader=0;
+    private int geomShader=0;
     private HashMap<String, UBO> ubo_interfaces;
     
     public Shader() {
@@ -48,6 +49,7 @@ public class Shader implements Resource{
     public Shader(Shader shader) {
     	this.vertShader = shader.vertShader;
     	this.fragShader = shader.fragShader;
+    	this.geomShader = shader.geomShader;
     	this.shader = shader.shader;
     	this.useShader = shader.useShader;
     }
@@ -111,6 +113,29 @@ public class Shader implements Resource{
          return fragShader;
      }
      
+   //same as per the vertex shader except for method syntax
+     private int createGeomShader(String geomCode){
+     	//fragShader will be non zero if successfully created
+    	 geomShader=ARBShaderObjects.glCreateShaderObjectARB(ARBGeometryShader4.GL_GEOMETRY_SHADER_ARB);
+         
+         //if created, convert the vertex shader code to a String
+         if(geomShader==0){return 0;}
+
+         /*
+         * associate the vertex code String with the created vertex shader
+         * and compile
+         */
+         ARBShaderObjects.glShaderSourceARB(geomShader, geomCode);
+         ARBShaderObjects.glCompileShaderARB(geomShader);
+         //if there was a problem compiling, reset vertShader to zero
+         if(!printLogInfo(geomShader)){
+        	 System.out.println("ERROR [fragshader id:" + geomShader + "]:\n" + geomCode);
+        	 geomShader=0;
+         }
+         //if zero we won't be using the shader
+         return geomShader;
+     }
+     
     /*
     * If the shader was setup successfully, we use the shader. Otherwise
     * we run normal drawing code.
@@ -215,19 +240,20 @@ public class Shader implements Resource{
 	}
 
 	@Override
-	public void loadFromFile(ResourceManager resource_manager, URL url, String extension) throws Exception {
+	public void loadFromFile(ResourceManager resource_manager, InputStream is, String extension) throws Exception {
 		ubo_interfaces = new HashMap<String, UBO>();
 		
         //create the shader program. If OK, create vertex
         //and fragment shaders
     	shader=ARBShaderObjects.glCreateProgramObjectARB();
     	
-    	InputStreamReader isr = new InputStreamReader(url.openStream());
+    	InputStreamReader isr = new InputStreamReader(is);
     	BufferedReader br = new BufferedReader(isr);
     	String line = br.readLine();
     	
     	String vert = new String();
     	String frag = new String();
+    	String geom = new String();
     	
     	while(line != null) {
     		switch(line) {
@@ -247,6 +273,14 @@ public class Shader implements Resource{
     				}
     				line = br.readLine();
     				break;
+    			case "###GEOM###":
+    				line = br.readLine();
+    				while(line != null && !line.contains("###ENDGEOM###")) {
+    					geom += line + "\n";
+    					line = br.readLine();
+    				}
+    				line = br.readLine();
+    				break;
     			default:
     				line = br.readLine();
     				break;
@@ -256,6 +290,10 @@ public class Shader implements Resource{
         if(shader!=0){
             vertShader=createVertShader(vert);
             fragShader=createFragShader(frag);
+            if(!geom.equals("")) {
+            	geomShader=createGeomShader(geom);
+            }
+            
         } else {
         	useShader=false;
         }
@@ -266,13 +304,15 @@ public class Shader implements Resource{
         if(vertShader != 0 && fragShader != 0){
             ARBShaderObjects.glAttachObjectARB(shader, vertShader);
             ARBShaderObjects.glAttachObjectARB(shader, fragShader);
+            if(geomShader != 0)
+            	ARBShaderObjects.glAttachObjectARB(shader, geomShader);
             ARBShaderObjects.glLinkProgramARB(shader);
             ARBShaderObjects.glValidateProgramARB(shader);
             useShader=printLogInfo(shader);
         } else {
         	useShader=false;
         	System.out.println("Failed to create shader");
-        	System.out.println("\tvertShader: " + vertShader + " && fragShader: " + fragShader);
+        	System.out.println("\tvertShader: " + vertShader + " && fragShader: " + fragShader + "geomShader: " + geomShader);
         }
 	}
 
diff --git a/src/engine/render/ubos/Light.java b/src/engine/render/ubos/Light.java
index 6b57de5..38bd4ce 100644
--- a/src/engine/render/ubos/Light.java
+++ b/src/engine/render/ubos/Light.java
@@ -50,6 +50,19 @@ public class Light implements UBOInterface {
 		this.spot_cutoff=new Float(spot_cutoff);
 		this.spot_exponent=new Float(spot_exponent);
 	}
+	
+	public Light(){
+			this.position=new Vector4f();
+			this.ambient=new Vector4f();
+			this.diffuse=new Vector4f();
+			this.specular=new Vector4f();
+			this.constant_attenuation=0;
+			this.linear_attenuation=0;
+			this.quadratic_attenuation=0;
+			this.spot_direction=new Vector3f();
+			this.spot_cutoff=0;
+			this.spot_exponent=0;
+		}
 		
 	public FloatBuffer createBuffer(int block_size, IntBuffer offsets) {
 		FloatBuffer buf = BufferUtils.createFloatBuffer(block_size/4);
@@ -174,4 +187,45 @@ public class Light implements UBOInterface {
 	public String getName() {
 		return name;
 	}
+
+	public Vector4f getPosition() {
+		return position;
+	}
+	
+    public Vector4f getAmbient() {
+    	return ambient;
+    }
+    
+    public Vector4f getDiffuse() {
+    	return diffuse;
+    }
+    
+    public Vector4f getSpecular() {
+    	return specular;
+    }
+    
+    public float getConstantAttenuation() {
+    	return constant_attenuation;
+    }
+    public float getLinearAttenuation() {
+    	return linear_attenuation;
+    }
+    public float getQuadraticAttenuation() {
+    	return quadratic_attenuation;
+    }
+	public Vector3f getSpotDirection() {
+		return spot_direction;
+	}
+	public float getSpotCutoff() {
+		return spot_cutoff;
+	}
+	public float getSpotExponent() {
+		return spot_exponent;
+	}
+	public int getNumLight() {
+		return num_lights;
+	}
+	public int getLightIndex() {
+		return light_index;
+	}
 }
diff --git a/src/engine/resource/Resource.java b/src/engine/resource/Resource.java
index b79e60e..1dd118d 100644
--- a/src/engine/resource/Resource.java
+++ b/src/engine/resource/Resource.java
@@ -1,11 +1,11 @@
 package engine.resource;
 
-import java.net.URL;
+import java.io.InputStream;
 
 public interface Resource {
 	public void loadFromFile(
 		ResourceManager resource_manager, 
-		URL url, 
+		InputStream is, 
 		String extension
 	) throws Exception;
 	
diff --git a/src/engine/resource/ResourceManager.java b/src/engine/resource/ResourceManager.java
index df1b730..2ab0292 100644
--- a/src/engine/resource/ResourceManager.java
+++ b/src/engine/resource/ResourceManager.java
@@ -2,16 +2,17 @@ package engine.resource;
 
 import java.io.BufferedWriter;
 import java.io.File;
+import java.io.FileInputStream;
 import java.io.FileNotFoundException;
 import java.io.FileWriter;
 import java.io.IOException;
+import java.io.InputStream;
 import java.util.ArrayList;
 import java.util.HashMap;
 
 import engine.input.InputMap;
 import engine.render.Model;
 import engine.render.Shader;
-import engine.window.WindowManager;
 
 public class ResourceManager {
 	/*
@@ -116,7 +117,6 @@ public class ResourceManager {
 		cat_to_class.put("inputmaps", InputMap.class);
 		cat_to_class.put("models", Model.class);
 		cat_to_class.put("shaders", Shader.class);
-		cat_to_class.put("themes", WindowManager.class);
 	}
 
 	
@@ -154,12 +154,14 @@ public class ResourceManager {
 					
 					//Create a stream
 					File f = new File(res.path);
+					InputStream in = new FileInputStream(f);
+					
 					
 					extension = res.path.split("\\.");
 					
 					//Pass to interface
 					res.data = res.item_class.newInstance();
-					res.data.loadFromFile(this, f.toURI().toURL(), extension[extension.length-1]);
+					res.data.loadFromFile(this, in, extension[extension.length-1]);
 				}
 				
 				return res.data;
diff --git a/src/engine/window/WindowManager.java b/src/engine/window/WindowManager.java
index 6f1dcd1..006b0ad 100644
--- a/src/engine/window/WindowManager.java
+++ b/src/engine/window/WindowManager.java
@@ -1,14 +1,12 @@
 package engine.window;
 
 import java.io.IOException;
-import java.net.URL;
 
 import org.lwjgl.LWJGLException;
 
-import engine.resource.Resource;
-import engine.resource.ResourceManager;
 import engine.window.components.Window;
 import engine.window.components.WindowList;
+import engine.window.tree.Model;
 
 import de.matthiasmann.twl.DesktopArea;
 import de.matthiasmann.twl.Event;
@@ -19,7 +17,7 @@ import engine.input.components.KeyMapException;
 import de.matthiasmann.twl.renderer.lwjgl.LWJGLRenderer;
 import de.matthiasmann.twl.theme.ThemeManager;
 
-public class WindowManager extends DesktopArea implements Resource {
+public class WindowManager extends DesktopArea {
 	private LWJGLRenderer renderer;
 	private GUI gui;
 	private ThemeManager theme;
@@ -31,10 +29,15 @@ public class WindowManager extends DesktopArea implements Resource {
 
 	public WindowManager() {
 		super();
-		//windowInit(null);
+		windowInit(null);
 	}
 
-	public void loadFromFile(ResourceManager resource_manager, URL url, String extension) throws Exception {
+	public WindowManager(Model m) {
+		super();
+		windowInit(m);
+	}
+
+	public void windowInit(Model m) {
 		try {
 			renderer = new LWJGLRenderer();
 		} catch (LWJGLException e1) {
@@ -42,7 +45,9 @@ public class WindowManager extends DesktopArea implements Resource {
 		}
 		gui = new GUI(this, renderer);
 		try {
-			theme = ThemeManager.createThemeManager(url,renderer);
+			theme = ThemeManager.createThemeManager(this.getClass()
+				.getClassLoader().getResource("resources/themes/default.xml"),
+				renderer);
 			gui.applyTheme(theme);
 		} catch (IOException e) {
 			e.printStackTrace();
@@ -123,7 +128,4 @@ public class WindowManager extends DesktopArea implements Resource {
 	public WindowList getWindows() {
 		return windows;
 	}
-	
-	//TODO: Fill this method out
-	public String toXML(){ return ""; }
 }
diff --git a/src/engine/window/components/LabeledValueAdjuster.java b/src/engine/window/components/LabeledValueAdjuster.java
new file mode 100644
index 0000000..48d37cb
--- /dev/null
+++ b/src/engine/window/components/LabeledValueAdjuster.java
@@ -0,0 +1,113 @@
+package engine.window.components;
+
+import java.util.ArrayList;
+
+import de.matthiasmann.twl.DialogLayout;
+import de.matthiasmann.twl.DialogLayout.Group;
+import de.matthiasmann.twl.Color;
+import de.matthiasmann.twl.Label;
+import de.matthiasmann.twl.ValueAdjusterFloat;
+import de.matthiasmann.twl.Widget;
+import de.matthiasmann.twl.model.FloatModel;
+import de.matthiasmann.twl.model.SimpleFloatModel;
+import de.matthiasmann.twl.utils.TintAnimator;
+import de.matthiasmann.twl.utils.TintAnimator.TimeSource;
+import editor.action_listener.ActionListener;
+import editor.action_listener.ActionEvent;
+
+public class LabeledValueAdjuster extends Widget implements ActionListener {
+	private ArrayList<ActionListener> action_listeners;
+	private DialogLayout dialoglayout;
+	private ValueAdjusterFloat value_adjuster;
+	private Label label;
+	private static int min = 0;
+	private static int max = 255;
+	private Color base_color;
+	
+	public LabeledValueAdjuster(String name) {
+		super();
+		
+		dialoglayout = new DialogLayout();
+		dialoglayout.setTheme("dialoglayout");
+		
+		this.setTheme("labeledvalueadjuster");
+		action_listeners = new ArrayList<ActionListener>();
+		
+		label = new Label(name);
+		label.setTheme("label");
+
+		value_adjuster = new ValueAdjusterFloat();
+		value_adjuster.setTheme("valueadjuster");
+		
+		FloatModel va_model = new SimpleFloatModel(min,max,0);
+		value_adjuster.setModel(va_model);
+				
+		dialoglayout.setSize(300, 25);
+		
+		createCallbacks();
+		createLayout();
+	}
+
+	private void createCallbacks() {
+		value_adjuster.getModel().addCallback(new Runnable() {
+			@Override
+			public void run() {
+				fireActionEvent();
+			}
+		});
+	}
+
+	public void setColor(Color color) {
+		this.base_color = color;
+		super.setTintAnimator(new TintAnimator(new TimeSource() {
+			@Override
+			public void resetTime() {
+			}
+
+			@Override
+			public int getTime() {
+				return 0;
+			}
+		}));
+		this.getTintAnimator().setColor(base_color);
+	}
+	
+	private void createLayout() {
+		// Create the horizontal rows
+		Group h_grid = dialoglayout.createSequentialGroup(label,value_adjuster);
+		
+		// Create the horizontal rows
+		Group v_grid = dialoglayout.createParallelGroup(label,value_adjuster);
+		
+		// All Dialog layout groups must have both a HorizontalGroup and
+		// VerticalGroup
+		// Otherwise "incomplete" exception is thrown and layout is not applied
+		dialoglayout.setHorizontalGroup(h_grid);
+		dialoglayout.setVerticalGroup(v_grid);
+		
+		dialoglayout.setSize(300, 25);
+		
+		this.add(dialoglayout);
+	}
+	
+	public float getValue() {
+		return value_adjuster.getValue();
+	}
+	
+	public void setValue(float value) {
+		value_adjuster.setValue(value);
+	}
+	
+	public void addActionListener(ActionListener listener) {
+		action_listeners.add(listener);
+	}
+	private void fireActionEvent() {
+		for (ActionListener ae : action_listeners) {
+			ae.actionPerformed(new ActionEvent(this));
+		}
+	}
+	@Override
+	public void actionPerformed(ActionEvent e) {
+		fireActionEvent();
+	}
+}
diff --git a/src/engine/window/components/RGBAAdjuster.java b/src/engine/window/components/RGBAAdjuster.java
index 5a4e8a2..292719a 100644
--- a/src/engine/window/components/RGBAAdjuster.java
+++ b/src/engine/window/components/RGBAAdjuster.java
@@ -1,14 +1,18 @@
 package engine.window.components;
 
+import java.util.ArrayList;
+
 import javax.vecmath.Vector4f;
 
 import de.matthiasmann.twl.DialogLayout;
 import de.matthiasmann.twl.DialogLayout.Group;
 import de.matthiasmann.twl.Label;
 import de.matthiasmann.twl.Widget;
+import editor.action_listener.ActionEvent;
+import editor.action_listener.ActionListener;
 
-
-public class RGBAAdjuster extends Widget {
+public class RGBAAdjuster extends Widget implements ActionListener {
+	private ArrayList<ActionListener> action_listeners;
 	private DialogLayout dialoglayout;
 	private Label label;
 	private SlidingValueAdjuster r;
@@ -17,6 +21,7 @@ public class RGBAAdjuster extends Widget {
 	private SlidingValueAdjuster a;
 
 	public RGBAAdjuster(String name) {
+		action_listeners = new ArrayList<ActionListener>();
 		this.setTheme("rgbaadjuster");
 		label = new Label(name);
 		label.setTheme("label");
@@ -67,6 +72,22 @@ public class RGBAAdjuster extends Widget {
 		dialoglayout.setSize(300, 150);
 		
 		this.add(dialoglayout);
+		
+		addCallbacks();
+	}
+	
+	public void addCallbacks() {
+		r.addActionListener(this);
+		g.addActionListener(this);
+		b.addActionListener(this);
+		a.addActionListener(this);
+	}
+	
+	public void setValue(Vector4f color) {
+		r.setValue(color.x);
+		g.setValue(color.y);
+		b.setValue(color.z);
+		a.setValue(color.w);
 	}
 	
 	public void setLabel(String name) {
@@ -87,4 +108,17 @@ public class RGBAAdjuster extends Widget {
 	public Vector4f getVector() {
 		return new Vector4f(r.getValue(),g.getValue(),b.getValue(),a.getValue());
 	}
+
+	public void addActionListener(ActionListener listener) {
+		action_listeners.add(listener);
+	}
+	private void fireActionEvent(String event) {
+		for (ActionListener ae : action_listeners) {
+			ae.actionPerformed(new ActionEvent(this, event));
+		}
+	}
+	@Override
+	public void actionPerformed(ActionEvent e) {
+		fireActionEvent("rgbaadjuster");
+	}
 }
diff --git a/src/engine/window/components/SlidingValueAdjuster.java b/src/engine/window/components/SlidingValueAdjuster.java
index d6dda1e..d4350f3 100644
--- a/src/engine/window/components/SlidingValueAdjuster.java
+++ b/src/engine/window/components/SlidingValueAdjuster.java
@@ -46,7 +46,9 @@ public class SlidingValueAdjuster extends Widget implements ActionListener {
 		FloatModel va_model = new SimpleFloatModel(min,max,0);
 		value_adjuster.setModel(va_model);
 		h_scroll.setMinMaxValue(min, max);
-				
+		
+		dialoglayout.setSize(300, 25);
+		
 		createCallbacks();
 		createLayout();
 	}
@@ -56,12 +58,14 @@ public class SlidingValueAdjuster extends Widget implements ActionListener {
 			@Override
 			public void run() {
 				h_scroll.setValue(Float.valueOf(value_adjuster.getValue()).intValue());
+				fireActionEvent();
 			}
 		});
 		h_scroll.addCallback(new Runnable() {
 			@Override
 			public void run() {
 				value_adjuster.setValue(h_scroll.getValue());
+				fireActionEvent();
 			}
 		});
 	}
@@ -103,16 +107,19 @@ public class SlidingValueAdjuster extends Widget implements ActionListener {
 		return value_adjuster.getValue();
 	}
 	
+	public void setValue(float value) {
+		value_adjuster.setValue(value);
+		h_scroll.setValue(Float.valueOf(value).intValue());
+	}
+	
 	public void addActionListener(ActionListener listener) {
 		action_listeners.add(listener);
 	}
-
 	private void fireActionEvent() {
 		for (ActionListener ae : action_listeners) {
 			ae.actionPerformed(new ActionEvent(this));
 		}
 	}
-
 	@Override
 	public void actionPerformed(ActionEvent e) {
 		fireActionEvent();
diff --git a/src/engine/window/components/XYZAdjuster.java b/src/engine/window/components/XYZAdjuster.java
index 6f52759..ec4b41b 100644
--- a/src/engine/window/components/XYZAdjuster.java
+++ b/src/engine/window/components/XYZAdjuster.java
@@ -1,30 +1,35 @@
 package engine.window.components;
 
+import java.util.ArrayList;
+
 import javax.vecmath.Vector3f;
 
 import de.matthiasmann.twl.DialogLayout;
 import de.matthiasmann.twl.DialogLayout.Group;
 import de.matthiasmann.twl.Label;
 import de.matthiasmann.twl.Widget;
+import editor.action_listener.ActionEvent;
+import editor.action_listener.ActionListener;
 
-
-public class XYZAdjuster extends Widget {
+public class XYZAdjuster extends Widget implements ActionListener {
+	private ArrayList<ActionListener> action_listeners;
 	private DialogLayout dialoglayout;
 	private Label label;
-	private SlidingValueAdjuster x;
-	private SlidingValueAdjuster y;
-	private SlidingValueAdjuster z;
+	private LabeledValueAdjuster x;
+	private LabeledValueAdjuster y;
+	private LabeledValueAdjuster z;
 
 	public XYZAdjuster(String name) {
+		action_listeners = new ArrayList<ActionListener>();
 		this.setTheme("rgbaadjuster");
 		label = new Label(name);
 		label.setTheme("label");
-		x = new SlidingValueAdjuster("X");
-		x.setTheme("slidingvalueadjuster");
-		y = new SlidingValueAdjuster("Y");
-		y.setTheme("slidingvalueadjuster");
-		z = new SlidingValueAdjuster("Z");
-		z.setTheme("slidingvalueadjuster");
+		x = new LabeledValueAdjuster("X");
+		x.setTheme("labeledvalueadjuster");
+		y = new LabeledValueAdjuster("Y");
+		y.setTheme("labeledvalueadjuster");
+		z = new LabeledValueAdjuster("Z");
+		z.setTheme("labeledvalueadjuster");
 
 		dialoglayout = new DialogLayout();
 		dialoglayout.setTheme("dialoglayout");
@@ -62,8 +67,20 @@ public class XYZAdjuster extends Widget {
 		dialoglayout.setSize(300, 125);
 		
 		this.add(dialoglayout);
+		addCallbacks();
 	}
 	
+	public void addCallbacks() {
+		x.addActionListener(this);
+		y.addActionListener(this);
+		z.addActionListener(this);
+	}
+	
+	public void setValue(Vector3f value) {
+		x.setValue(value.x);
+		y.setValue(value.y);
+		z.setValue(value.z);
+	}
 	public void setLabel(String name) {
 		label.setText(name);
 	}
@@ -79,4 +96,17 @@ public class XYZAdjuster extends Widget {
 	public Vector3f getVector() {
 		return new Vector3f(x.getValue(),y.getValue(),z.getValue());
 	}
+
+	public void addActionListener(ActionListener listener) {
+		action_listeners.add(listener);
+	}
+	private void fireActionEvent() {
+		for (ActionListener ae : action_listeners) {
+			ae.actionPerformed(new ActionEvent(this));
+		}
+	}
+	@Override
+	public void actionPerformed(ActionEvent e) {
+		fireActionEvent();
+	}
 }
diff --git a/src/engine/window/components/XYZWAdjuster.java b/src/engine/window/components/XYZWAdjuster.java
index 7bd351d..c21255e 100644
--- a/src/engine/window/components/XYZWAdjuster.java
+++ b/src/engine/window/components/XYZWAdjuster.java
@@ -1,33 +1,39 @@
 package engine.window.components;
 
+import java.util.ArrayList;
+
 import javax.vecmath.Vector4f;
 
 import de.matthiasmann.twl.DialogLayout;
 import de.matthiasmann.twl.DialogLayout.Group;
 import de.matthiasmann.twl.Label;
 import de.matthiasmann.twl.Widget;
+import editor.action_listener.ActionEvent;
+import editor.action_listener.ActionListener;
 
 
-public class XYZWAdjuster extends Widget {
+public class XYZWAdjuster extends Widget implements ActionListener {
+	private ArrayList<ActionListener> action_listeners;
 	private DialogLayout dialoglayout;
 	private Label label;
-	private SlidingValueAdjuster x;
-	private SlidingValueAdjuster y;
-	private SlidingValueAdjuster z;
-	private SlidingValueAdjuster w;
+	private LabeledValueAdjuster x;
+	private LabeledValueAdjuster y;
+	private LabeledValueAdjuster z;
+	private LabeledValueAdjuster w;
 
 	public XYZWAdjuster(String name) {
+		action_listeners = new ArrayList<ActionListener>();
 		this.setTheme("rgbaadjuster");
 		label = new Label(name);
 		label.setTheme("label");
-		x = new SlidingValueAdjuster("X");
-		x.setTheme("slidingvalueadjuster");
-		y = new SlidingValueAdjuster("Y");
-		y.setTheme("slidingvalueadjuster");
-		z = new SlidingValueAdjuster("Z");
-		z.setTheme("slidingvalueadjuster");
-		w = new SlidingValueAdjuster("W");
-		w.setTheme("slidingvalueadjuster");
+		x = new LabeledValueAdjuster("X");
+		x.setTheme("labeledvalueadjuster");
+		y = new LabeledValueAdjuster("Y");
+		y.setTheme("labeledvalueadjuster");
+		z = new LabeledValueAdjuster("Z");
+		z.setTheme("labeledvalueadjuster");
+		w = new LabeledValueAdjuster("W");
+		w.setTheme("labeledvalueadjuster");
 		
 		dialoglayout = new DialogLayout();
 		dialoglayout.setTheme("dialoglayout");
@@ -67,11 +73,27 @@ public class XYZWAdjuster extends Widget {
 		dialoglayout.setSize(300, 150);
 		
 		this.add(dialoglayout);
+		
+		addCallbacks();
+	}
+	
+	public void addCallbacks() {
+		x.addActionListener(this);
+		y.addActionListener(this);
+		z.addActionListener(this);
+		w.addActionListener(this);
 	}
 	
 	public void setLabel(String name) {
 		label.setText(name);
 	}
+	
+	public void setValue(Vector4f value) {
+		x.setValue(value.x);
+		y.setValue(value.y);
+		z.setValue(value.z);
+		w.setValue(value.w);
+	}
 	public float getXValue() {
 		return x.getValue();
 	}
@@ -87,4 +109,19 @@ public class XYZWAdjuster extends Widget {
 	public Vector4f getVector() {
 		return new Vector4f(x.getValue(),y.getValue(),z.getValue(),w.getValue());
 	}
+	
+	public void addActionListener(ActionListener listener) {
+		action_listeners.add(listener);
+	}
+
+	private void fireActionEvent() {
+		for (ActionListener ae : action_listeners) {
+			ae.actionPerformed(new ActionEvent(this));
+		}
+	}
+
+	@Override
+	public void actionPerformed(ActionEvent e) {
+		fireActionEvent();
+	}
 }
diff --git a/src/resources/themes/default.xml b/src/resources/themes/default.xml
index ff5c23a..dffa4b9 100644
--- a/src/resources/themes/default.xml
+++ b/src/resources/themes/default.xml
@@ -447,7 +447,31 @@
         <param name="minHeight"><int>25</int></param>
         <param name="maxHeight"><int>25</int></param>
     </theme>
-
+
+	<theme name="labeledvalueadjuster" ref="-defaults">
+    	<theme name="dialoglayout" ref="dialoglayout">
+			<theme name="label" ref="label">
+                <param name="minWidth"><int>50</int></param>
+                <param name="maxWidth"><int>400</int></param>
+                <param name="minHeight"><int>25</int></param>
+                <param name="maxHeight"><int>25</int></param>
+            </theme>
+			<theme name="valueadjuster" ref="valueadjuster">
+                <param name="minWidth"><int>100</int></param>
+                <param name="maxWidth"><int>400</int></param>
+                <param name="minHeight"><int>25</int></param>
+                <param name="maxHeight"><int>25</int></param>
+            </theme>
+            <param name="minWidth"><int>300</int></param>
+            <param name="maxWidth"><int>2000</int></param>
+            <param name="minHeight"><int>25</int></param>
+            <param name="maxHeight"><int>25</int></param>
+		</theme>
+        <param name="minWidth"><int>300</int></param>
+        <param name="maxWidth"><int>2000</int></param>
+        <param name="minHeight"><int>25</int></param>
+        <param name="maxHeight"><int>25</int></param>
+    </theme>
     <theme name="slidingvalueadjuster" ref="-defaults">
     	<theme name="dialoglayout" ref="dialoglayout">
 			<theme name="label" ref="label">
@@ -495,7 +519,7 @@
 	<theme name="xyzwadjuster" ref="widget">
     	<theme name="dialoglayout" ref="dialoglayout">
     		<theme name="label" ref="label"/>
-        	<theme name="slidingvalueadjuster" ref="slidingvalueadjuster"/>
+        	<theme name="labeledvalueadjuster" ref="labeledvalueadjuster"/>
             <param name="minWidth"><int>300</int></param>
             <param name="maxWidth"><int>2000</int></param>
             <param name="minHeight"><int>175</int></param>
@@ -509,7 +533,7 @@
 	<theme name="xyzadjuster" ref="widget">
     	<theme name="dialoglayout" ref="dialoglayout">
     		<theme name="label" ref="label"/>
-        	<theme name="slidingvalueadjuster" ref="slidingvalueadjuster"/>
+        	<theme name="labeledvalueadjuster" ref="labeledvalueadjuster"/>
             <param name="minWidth"><int>300</int></param>
             <param name="maxWidth"><int>2000</int></param>
             <param name="minHeight"><int>125</int></param>
diff --git a/src/test/Main.java b/src/test/Main.java
index 5c87c42..c275c12 100644
--- a/src/test/Main.java
+++ b/src/test/Main.java
@@ -3,6 +3,8 @@ package test;
 import javax.vecmath.Vector3f;
 import javax.vecmath.Vector4f;
 
+import org.lwjgl.opengl.Display;
+
 import editor.window.LightMenu;
 import editor.window.MaterialMenu;
 import engine.Engine;
@@ -32,10 +34,9 @@ public class Main {
 	
 	private LightMenu lightmenu;
 	private MaterialMenu materialmenu;
+	private static boolean multiThreaded = true;
 	
 	public static void main(String args[]) {
-		boolean multiThreaded = false;
-		
 		Main m = new Main();
 		if(multiThreaded == true)
 			m.runMultiThread();
@@ -158,9 +159,9 @@ public class Main {
 		Shader shader = (Shader)engine.resource_manager.getResource("default", "shaders");
 		light = new Light(
 			new Vector4f(0.0f,2.0f,10.0f,1.0f),
-			new Vector4f(5.0f,0.0f,0.0f,255.0f),
-			new Vector4f(5.0f,0.0f,0.0f,255.0f),
-			new Vector4f(5.0f,0.0f,0.0f,255.0f),
+			new Vector4f(5.0f,5.0f,5.0f,255.0f),
+			new Vector4f(5.0f,5.0f,5.0f,255.0f),
+			new Vector4f(5.0f,5.0f,5.0f,255.0f),
 			0.1f,
 			1.0f,
 			0.1f,
@@ -170,9 +171,9 @@ public class Main {
 		);
         light2 = new Light(
 			new Vector4f(0.0f,2.0f,-10.0f,1.0f),
-			new Vector4f(0.0f,0.0f,5.0f,255.0f),
-			new Vector4f(0.0f,0.0f,5.0f,255.0f),
-			new Vector4f(0.0f,0.0f,5.0f,255.0f),
+			new Vector4f(5.0f,5.0f,5.0f,255.0f),
+			new Vector4f(5.0f,5.0f,5.0f,255.0f),
+			new Vector4f(5.0f,5.0f,5.0f,255.0f),
 			0.1f,
 			1.0f,
 			0.1f,
@@ -184,9 +185,7 @@ public class Main {
         lights.add(light2);
         
         shader.addUBO(lights);
-        
     	shader.addUBO(camera.getMVPmatrix());
-    	
     	shader.addUBO(new Material());
 	}
 
@@ -195,7 +194,7 @@ public class Main {
 	}
 	
 	public void runSingleThread() {
-		while(true){
+		while(!Display.isCloseRequested()){
 			engine.renderOnce();
 			engine.physicsOnce();
 		}
