diff --git a/src/engine/entity/Entity.java b/src/engine/entity/Entity.java
index 5fec223..a277f70 100644
--- a/src/engine/entity/Entity.java
+++ b/src/engine/entity/Entity.java
@@ -11,11 +11,14 @@ package engine.entity;
 
 import engine.importing.pieces.Model;
 
+import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.Set;
 
 import javax.vecmath.Vector3f;
 
+import engine.monitoring.EntityObserver;
+
 import com.bulletphysics.collision.dispatch.CollisionObject;
 import com.bulletphysics.collision.dispatch.PairCachingGhostObject;
 import com.bulletphysics.collision.shapes.CollisionShape;
@@ -29,6 +32,7 @@ public class Entity {
 	protected CollisionObject collision_object;
 	private HashMap<String,Object> data;
 	private Model model;
+	private ArrayList<EntityObserver> observers;
 	private boolean shouldDraw = true;
 	public static enum ObjectType{ghost,rigidbody};
 	private ObjectType object_type;
@@ -116,7 +120,13 @@ public class Entity {
 	//Sets the initial name of the body in the list
 	//Also sets some default options to the ent
 	private void initialSetup(boolean c){
-	  initialSetup("ent" + String.valueOf(num_entities), c);
+		num_entities++;
+		data = new HashMap<String,Object>();
+		data.put("name", "ent" + String.valueOf(num_entities));
+		data.put("collidable", c);
+		data.put("TTL", 0);
+		
+		observers = new ArrayList<EntityObserver>();
 	}
 
 	private void initialSetup(String name, boolean c){
@@ -125,6 +135,8 @@ public class Entity {
 		data.put("name", name);
 		data.put("collidable", c);
 		data.put("TTL", 0);
+		
+		observers = new ArrayList<EntityObserver>();
 	}
 	/* End of Constructors
 	
@@ -148,7 +160,10 @@ public class Entity {
 	}
 	
 	public void setProperty(String key, Object val){
+		Object old_key_val = data.get(key);
 		data.put(key,val);
+		//starter is passed to tell when to end the horrible infinite loop
+		notifyObservers(key, old_key_val, val);
 	}
 	
 	public void removeProperty(String key){
@@ -200,6 +215,25 @@ public class Entity {
 		}
 	}
 
+	
+	/* Functions for EntityObservers */
+	public void registerObserver(EntityObserver o) {observers.add(o);}
+
+	public void removeObserver(EntityObserver o) {
+		int i = observers.indexOf(o);
+		if (i >= 0){
+			observers.remove(i);
+		}
+	}
+
+	public void notifyObservers(String key, Object old_name, Object new_name) {
+
+		for(int i = 0; i < observers.size(); i++){
+			EntityObserver observer = (EntityObserver)observers.get(i);
+			observer.update(key, old_name, new_name);
+		}
+	}
+
 	public void setCollisionFlags(int kinematic_object) {
 		collision_object.setCollisionFlags(kinematic_object);	
 	}
