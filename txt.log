diff --git a/src/engine/entity/EntityList.java b/src/engine/entity/EntityList.java
index 5243989..d85955b 100644
--- a/src/engine/entity/EntityList.java
+++ b/src/engine/entity/EntityList.java
@@ -1,23 +1,32 @@
 package engine.entity;
 
+import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.Set;
 import java.util.concurrent.ConcurrentLinkedQueue;
 
+import engine.monitoring.Observer;
+import engine.monitoring.Subject;
+
+
+import engine.monitoring.EntityObserver;
+
 import engine.physics.Physics;
 
-public class EntityList{
+public class EntityList implements EntityObserver, Subject{
 	private HashMap<String,Entity> names;
 	private Physics physics;
 
 	//private HashMap<String,TypedConstraint> constraints;
 
+	private ArrayList<Observer> observers;
 	private ConcurrentLinkedQueue<QueueItem> physicsQueue;
 	private ConcurrentLinkedQueue<QueueItem> renderQueue;
 	
 	public EntityList(Physics physics){
 		names = new HashMap<String,Entity>();
 		this.physics=physics;
+		observers = new ArrayList<Observer>();
 		
 		physicsQueue = new ConcurrentLinkedQueue<QueueItem>();
 		renderQueue = new ConcurrentLinkedQueue<QueueItem>();
@@ -69,9 +78,14 @@ public class EntityList{
 		boolean ret = false;
 		
 		if(e.keyExists("name")){
+			names.put((String)e.getProperty("name"), e);
+			names.size();
+			
 			if( e.getCollisionObject() != null ){
 				physics.getDynamicsWorld().addCollisionObject(e.getCollisionObject());
 			}
+			e.registerObserver(this);
+			notifyObservers(e.getProperty("name"));
 			ret = true;
 		}
 		return ret;
@@ -92,25 +106,28 @@ public class EntityList{
 	}
 	private void removePhysicsItem(Entity entity){
 		names.remove(entity);
+		entity.removeObserver(this);
 		physics.removeEntity(entity);
+		notifyObservers(entity.getProperty("name"));
 	}
-	
-	public void addEntity(Entity ent){
-	  names.put((String)ent.getProperty("name"), ent);
-	  physicsQueue.add(new QueueItem(ent,QueueItem.ADD));
-	  renderQueue.add(new QueueItem(ent,QueueItem.ADD));
+
+	//Set actions that need to wait on the physics
+	public void enqueuePhysics(Entity ent, int action) {
+		physicsQueue.add(new QueueItem(ent,action));
 	}
 	
-	
-	public void removeEntity(String name){
-	  if(names.containsKey(name)){
-	    removeEntity(names.get(name));
-	  }
+	public void enqueueRenderer(Entity ent, int action) {
+		renderQueue.add(new QueueItem(ent,action));
 	}
-	public void removeEntity(Entity ent){ 
-    names.remove(ent.getProperty(Entity.NAME));
-    physicsQueue.add(new QueueItem(ent,QueueItem.REMOVE));
-    renderQueue.add(new QueueItem(ent,QueueItem.REMOVE));
+	
+	/* ENTITY OBSERVER IMPLEMENTATION */
+	public void update(String key, Object old_val, Object new_val) {
+		if(key == "name"){
+			Entity ent = this.getItem(key);
+			enqueuePhysics(ent, QueueItem.REMOVE);
+			this.addPhysicsItem(ent);
+			notifyObservers(key);
+		}
 	}
 	
 	/*Physics Constraints*/
@@ -131,4 +148,21 @@ public class EntityList{
 			constraints.remove(constraint_name);
 		}
 	}*/
+	
+	/* SUBJECT IMPLEMENTATION */
+	@Override
+	public void registerObserver(Observer o) {
+		observers.add(o);
+	}
+	@Override
+	public void removeObserver(Observer o) {
+		observers.remove(o);
+	}
+	@Override
+	public void notifyObservers(Object o) {
+		for(int i = 0; i < observers.size(); i++){
+			Observer observer = (Observer)observers.get(i);
+				observer.update(o);
+		}	
+	}
 }
\ No newline at end of file
